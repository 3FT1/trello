# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on: [push]

  # https://github.com/marketplace/actions/build-and-push-docker-images
jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ vars.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
  # Ec2 에 배포
  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # https://github.com/marketplace/actions/ssh-remote-commands
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ vars.EC2_KEY }}
          script: |
                    # 기존 컨테이너 중지 및 제거
                    CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
                    if [ ! -z "$CONTAINER_ID" ]; then
                    sudo docker stop $CONTAINER_ID
                    sudo docker rm $CONTAINER_ID
                    
            
            # 새 이미지 Pull 및 실행
                    sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
                    sudo docker run -d -p 8080:8080 \
                    -e DB_USERNAME=${{vars.DB_USERNAME}} \
                    -e DB_PASSWORD=${{vars.DB_PASSWORD}} \
                    -e DB_URL=${{vars.DB_URL}} \
                    ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
